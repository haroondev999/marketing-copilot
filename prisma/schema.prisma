generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  conversations Conversation[]
  brandKits     BrandKit[]
  integrations  Integration[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Campaign {
  id        String   @id @default(cuid())
  userId    String
  goal      String
  channels  String[]
  content   Json     @default("{}")
  audience  Json     @default("{}")
  budget    Float?
  schedule  Json?
  status    String   @default("draft")
  metrics   Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  launchedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([userId, status, createdAt])
  @@index([launchedAt])
  @@map("campaigns")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  messages  Json     @default("[]")
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, updatedAt])
  @@map("conversations")
}

model BrandKit {
  id             String   @id @default(cuid())
  userId         String
  name           String
  primaryColor   String
  secondaryColor String
  fontFamily     String
  tone           String
  values         String   @db.Text
  logoUrl        String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([userId, isActive])
  @@map("brand_kits")
}

model Integration {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String
  status      String   @default("disconnected")
  credentials Json     @default("{}")
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name, type])
  @@index([userId])
  @@index([status])
  @@index([userId, type])
  @@map("integrations")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  metadata  Json     @default("{}")
  ipAddress String?
  userAgent String?
  status    String   @default("success")
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}